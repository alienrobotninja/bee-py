# Project specifications
[project]
name = "swarm-bee-py"
version = "0.1.1"
description = "Python client library for connecting to Bee decentralised storage"
authors = [
    { name = "SAIKAT KARMAKAR", email = "saikickkarma@protonmail.com" },
]
dependencies = [
    "structlog>=23.2.0",
    "semver>=3.0.2",
    "websocket-client>=1.6.4",
    "eth-pydantic-types>=0.1.0a3", # need for pydantic compatible HexBytes
    "web3>=6.12.0",
    "deepmerge>=1.1.1",
    "eth-ape>=0.7.0",
    "swarm-cid-py>=0.1.3",
    "ecdsa>=0.18.0",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "LGPL-3.0, GPL-3.0" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
homepage = "https://github.com/alienrobotninja/bee-py"
repository = "https://github.com/alienrobotninja/bee-py"
Issues = "https://github.com/alienrobotninja/bee-py/issues"
Changelog = "https://github.com/alienrobotninja/bee-py/releases"

# build system to use
[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

# pdm dependencies
[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
    "pre-commit-hooks>=4.5.0",
    "bandit>=1.7.5",
    "nox>=2023.4.22",
    "build>=1.0.3",
    "requests-mock>=1.11.0",
    "pytest-print>=1.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "click>=8.1.7",
    "pytest-timeout>=2.2.0",
]
lint = [
    "black>=23.11.0",              # Auto-formatter and linter
    "ruff>=0.1.5",                 # Auto-formatter and linter
    "mypy>=1.7.0",                 # Static type analyzer
    "types-PyYAML>=6.0.12.12",     # Needed due to mypy typeshed
    "types-requests",              # Needed due to mypy typeshed
    "types-setuptools>=68.2.0.1",  # Needed due to mypy typeshed
    "flake8>=6.1.0",               # Style linter
    "flake8-breakpoint>=1.1.0",    # detect breakpoints left in code
    "flake8-print>=5.0.0",         # detect print statements left in code
    "isort>=5.12.0",               # Import sorting linter
    "mdformat>=0.7.17",            # Auto-formatter for markdown
    "mdformat-gfm>=0.3.0",         # Needed for formatting GitHub-flavored markdown
    "mdformat-frontmatter>=2.0.8", # Needed for frontmatters-style
    "mdformat-pyproject>=0.0.1",   # Allows configuring in pyproject.toml
    "Flake8-pyproject>=1.2.3",
]

# * https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#isort

# black formatter
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

# isort
[tool.isort]
# make it compatible with black
profile = "black"
line_length = 120
force_grid_wrap = 0
include_trailing_comma = true
multi_line_output = 3
use_parentheses = true

# mdformat
[tool.mdformat]
number = true

# flake8
[tool.flake8]
max-line-length= 120
ignore = ["E203", "W503"]
exclude = ["__pycache__", ".venv/*", "funky_experiments/*", "tests/*"]
docstring-convention = "google"

# mypy
[tool.mypy]
exclude = ["build/", "dist/", "docs/", "funky_experiments/*", "noxfile.py", "tests/*"]
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.mypy-pytest]
ignore_missing_imports = true

# ruff
[tool.ruff]
line-length = 120
extend-select = ["I"]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]

[tool.ruff.isort]
known-first-party = ["bee_py"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "PLR2004"]

[tool.coverage.run]
source_pkgs = ["bee_py", "tests"]
branch = true
parallel = true
omit = ["src/bee_py/__about__.py"]

[tool.coverage.paths]
bee_py = ["src/bee_py", "*/bee-py/src/bee_py"]
tests = ["tests", "*/bee-py/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.pytest.ini_options]
norecursedirs = "projects"
addopts = "-p no:ape_test"  # NOTE: Prevents the ape plugin from activating on our tests
python_files = "test_*.py"
testpaths = "tests"
markers = "fuzzing: Run Hypothesis fuzz test suite"
filterwarnings = [
    "ignore::DeprecationWarning",
]
